{"version":3,"sources":["components/header/index.tsx","components/image-Item/index.tsx","store/features/favorites-reducer.ts","api.ts","store/features/images-slice.ts","store/hooks.ts","components/pagination/index.tsx","components/image-list/index.tsx","components/favorite-list/index.tsx","App.tsx","store/root-reducer.ts","store/index.ts","index.tsx"],"names":["Header","className","exact","to","useStyles","makeStyles","theme","createStyles","paper","textAlign","color","palette","text","secondary","width","height","backgroundPosition","backgroundSize","ImageItem","item","selectItem","classes","Grid","xs","sm","md","Paper","style","backgroundImage","largeImageURL","onClick","addItemToFavorite","createAction","deleteItemFromFavorite","favoritesReducer","createReducer","builder","addCase","state","action","payload","filter","id","fetchImagesData","searchParams","page","a","api","process","fetch","response","json","data","hits","message","fetchData","createAsyncThunk","params","searchParam","imagesSlice","createSlice","name","initialState","status","reducers","extraReducers","pending","fulfilled","rejected","useAppDispatch","useDispatch","useAppSelector","useSelector","PaginationList","match","handleChange","Pagination","count","onChange","ImageListWithRouter","withRouter","history","React","useState","setPage","dispatch","favorite","listen","useEffect","existingItem","find","el","CircularProgress","Alert","severity","container","spacing","map","event","value","root","flexGrow","FavoriteList","length","padding","App","path","component","rootReducer","combineReducers","persistConfig","key","version","storage","whitelist","middleware","getDefaultMiddleware","immutableCheck","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","thunk","persistedReducer","persistReducer","store","configureStore","reducer","devTools","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.e9ef6735.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom'\r\nimport './index.scss'\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <header className='header'>\r\n        <div className=\"header-wrapper\">\r\n            <NavLink exact to=\"/\" className=\"header__link\">\r\n                <h2>Избранные</h2>\r\n            </NavLink>\r\n            <NavLink  to=\"/Птицы\" className=\"header__link\">\r\n                <h2>Птицы</h2>\r\n            </NavLink>\r\n            <NavLink  to=\"/Здания\" className=\"header__link\">\r\n                <h2>Здания</h2>\r\n            </NavLink>\r\n            <NavLink  to=\"/Погода\" className=\"header__link\">\r\n                <h2>Погода</h2>\r\n            </NavLink>\r\n        </div>\r\n    </header>\r\n  );\r\n}","import React from 'react'\r\nimport { Grid, Paper } from '@material-ui/core';\r\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\r\nimport { IImage } from '../../types/image'\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport './index.scss'\r\n\r\ninterface Props {\r\n    item: IImage;\r\n    selectItem: (item: IImage)=> void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    paper: {\r\n      textAlign: 'center',\r\n      color: theme.palette.text.secondary,\r\n      width: '100%',\r\n      height: '100%',\r\n      backgroundPosition: 'center',\r\n      backgroundSize: 'cover'\r\n    },\r\n  }),\r\n);\r\n \r\nexport const ImageItem = ({item, selectItem}: Props) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid item xs={6} sm={4} md={4} className=\"card\">\r\n            <Paper\r\n                className={classes.paper}\r\n                style={{\r\n                    backgroundImage: `url(${item.largeImageURL})`,\r\n                }}\r\n            />\r\n            <BookmarkBorderIcon \r\n                className=\"card__btn\"\r\n                onClick={() => selectItem(item)}\r\n            />\r\n        </Grid>\r\n    )\r\n}\r\n","import { IImage } from \"../../types/image\";\r\nimport { createAction, createReducer } from '@reduxjs/toolkit'\r\n\r\nexport const addItemToFavorite = createAction<IImage>('@@FAVORITES/add')\r\nexport const deleteItemFromFavorite = createAction<number>('@@FAVORITES/delete')\r\n\r\nconst favoritesReducer = createReducer([] as IImage[], (builder) => {\r\n  builder\r\n    .addCase(addItemToFavorite, (state, action) => {\r\n      const item = action.payload\r\n      return [...state, item]\r\n    })\r\n    .addCase(deleteItemFromFavorite, (state, action) => {\r\n      return state.filter(item => item.id !== action.payload)\r\n    })\r\n})\r\n\r\nexport default favoritesReducer","export const fetchImagesData = async (searchParams?: string, page?: any) => {\r\n    const api = `https://pixabay.com/api/?key=${process.env.REACT_APP_API_KEY}&q=${searchParams}&image_type=photo&pretty=true&page=${page}`\r\n    try {\r\n        const response = await fetch(api)\r\n        const data = await response.json()\r\n        return data.hits\r\n    } catch (error) {\r\n        if (error) {\r\n            return error.message\r\n        }\r\n    }\r\n}\r\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\r\nimport { fetchImagesData } from \"../../api\";\r\nimport { IImage } from \"../../types/image\";\r\n  \r\ninterface AppState {\r\n  data: IImage[];\r\n  status: 'idle' | 'pending' | 'succeeded' | 'failed';\r\n}\r\n\r\nconst initialState = {\r\n  data: [],\r\n  status: 'idle',\r\n} as AppState\r\n\r\nexport const fetchData = createAsyncThunk(\r\n    \"@@DATA/fetchDataList\",\r\n    async (params: any) => {\r\n      const {searchParam, page} = params;\r\n      const data = await fetchImagesData(searchParam, page);\r\n      return data;    \r\n    }\r\n)\r\n\r\nconst imagesSlice = createSlice({\r\n  name: '@@DATA',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchData.pending, (state) => {\r\n        state.status = 'pending';\r\n    })\r\n    builder.addCase(fetchData.fulfilled, (state, action) => {\r\n        state.data = action.payload;\r\n        state.status = 'succeeded';\r\n    })\r\n    builder.addCase(fetchData.rejected, \r\n        (state) => {\r\n        state.status = 'failed';\r\n    });\r\n  },\r\n})\r\n\r\n// export const { addItemToFavor } = imagesSlice.actions;\r\n\r\nexport default imagesSlice.reducer;","\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './index'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import React from 'react'\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport './index.scss'\r\n\r\n\r\ninterface Props {\r\n  match: any;\r\n  page: number;\r\n  setPage: (page: number) => void;\r\n  handleChange: any\r\n}\r\n\r\nexport const PaginationList = ({match, page, handleChange}:Props) => {\r\n    return (\r\n        <div>\r\n            <Pagination className=\"pagination\" count={10} page={page} onChange={handleChange}/>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { fetchData, addItemToFavorite, deleteItemFromFavorite } from '../../store/features';\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { IImage } from '../../types/image';\r\nimport { ImageItem } from \"../image-Item\";\r\nimport { PaginationList } from '../pagination';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\ninterface MatchParams {\r\n  id: string;\r\n}\r\n\r\n\r\nconst ImageList = ({match, history}: RouteComponentProps<MatchParams>) => {\r\n  const [page, setPage] = React.useState(1);\r\n  const dispatch = useAppDispatch();\r\n  const data = useAppSelector((state) => state.imagesSlice.data);\r\n  const status = useAppSelector((state) => state.imagesSlice.status);\r\n  const favorite = useAppSelector((state) => state.favoritesReducer);\r\n  \r\n  history.listen(() => {\r\n    setPage(1)\r\n  })\r\n  \r\n  useEffect(() => {\r\n    dispatch(fetchData({\r\n      searchParam:match.params.id,\r\n      page\r\n    }))\r\n    \r\n  }, [dispatch, match.params.id, page])\r\n\r\n  const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n    setPage(value);\r\n    dispatch(fetchData({\r\n      searchParam:match.params.id,\r\n      page\r\n    }))\r\n  };\r\n\r\n  const selectItem = (item: IImage) => {\r\n    const existingItem = favorite.find((el) => el.id === item.id)\r\n    if(existingItem) {\r\n      dispatch(deleteItemFromFavorite(item.id))\r\n    } else {\r\n      dispatch(addItemToFavorite(item)) \r\n    }  \r\n  }\r\n\r\n\r\n  if(status === 'pending') {\r\n    return <CircularProgress/>\r\n  }\r\n\r\n  if(status === 'failed') {\r\n    return <Alert severity=\"error\">Что-то пошло не так. Пожалуйста попробуйте позже.</Alert>\r\n  }\r\n  return (\r\n       <div>\r\n          <Grid container spacing={1}>\r\n              {data.map((item:IImage) => {\r\n                  return <ImageItem \r\n                    key={item.id} \r\n                    item={item} \r\n                    selectItem={selectItem}\r\n                  />\r\n              })}    \r\n          </Grid>\r\n          <PaginationList \r\n            match={match.params.id} \r\n            page={page} \r\n            setPage={setPage} \r\n            handleChange={handleChange}/>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport const ImageListWithRouter = withRouter(ImageList);\r\n","import React from 'react'\r\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\r\nimport { IImage } from '../../types/image';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { deleteItemFromFavorite } from '../../store/features';\r\nimport { ImageItem } from '../image-Item';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n  }),\r\n);\r\n\r\nexport const FavoriteList = () => {\r\n    const dispatch = useAppDispatch();\r\n    const data = useAppSelector((state) => state.favoritesReducer);\r\n    const classes = useStyles();\r\n\r\n    const selectItem = (item: IImage) => {\r\n        dispatch(deleteItemFromFavorite(item.id))\r\n      }\r\n\r\n    if(data.length === 0) {\r\n        return <h3>\r\n            У вас нет избранных картинок\r\n        </h3>\r\n    }\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={1}>\r\n                {data.map((item:IImage) => {\r\n                    return <ImageItem \r\n                        key={item.id} \r\n                        item={item}\r\n                        selectItem={selectItem} \r\n                    />\r\n                })}    \r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport { FavoriteList, Header, ImageListWithRouter } from './components'\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport './base.scss'\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      padding: '10px',\n    },\n  }),\n);\n\n\n\nexport const App = () => {\n  const classes = useStyles();\n  return (\n    <div>\n      <Header/>\n      <div className={classes.root}>\n        <Switch>\n          <Route exact path=\"/\" component={FavoriteList}/>\n          <Route path=\"/:id\" component={ImageListWithRouter}/>    \n        </Switch>\n      </div>\n    </div>\n  )\n}\n","import { combineReducers } from '@reduxjs/toolkit'\r\nimport imagesSlice from './features/images-slice'\r\nimport favoritesReducer from './features/favorites-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    imagesSlice,\r\n    favoritesReducer\r\n})\r\n\r\n\r\nexport default rootReducer","import { configureStore, Action, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport { ThunkAction } from 'redux-thunk'\r\nimport {\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nimport rootReducer from './root-reducer'\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  version: 1,\r\n  storage,\r\n  whitelist: ['favoritesReducer']\r\n}\r\n\r\nconst middleware = getDefaultMiddleware({\r\n  immutableCheck: false,\r\n  serializableCheck: {\r\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n  },\r\n  thunk: true,\r\n})\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV !== 'production'\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport {App} from './App';\nimport { store } from './store';\nimport {persistStore} from 'redux-persist'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nlet persistor = persistStore(store)\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistor} loading={null}>\n      <BrowserRouter>\n          <App />\n      </BrowserRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}